<?php

/**
 * @file
 * Provides a secret code entity type.
 */

use Drupal\Core\Render\Element;
use Drupal\secret_code\Entity\SecretCode;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function secret_code_theme() {
  return [
    'secret_code' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for secret code templates.
 *
 * Default template: secret-code.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the secret code information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_secret_code(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function secret_code_user_cancel($edit, UserInterface $account, $method) {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish secret codes.
      $storage = \Drupal::entityTypeManager()->getStorage('secret_code');
      $secret_code_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->execute();
      foreach ($storage->loadMultiple($secret_code_ids) as $secret_code) {
        $secret_code->set('status', FALSE);
        $secret_code->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize secret codes.
      $storage = \Drupal::entityTypeManager()->getStorage('secret_code');
      $secret_code_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->execute();
      foreach ($storage->loadMultiple($secret_code_ids) as $secret_code) {
        $secret_code->setOwnerId(0);
        $secret_code->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function secret_code_user_predelete(UserInterface $account) {
  // Delete secret codes.
  $storage = \Drupal::entityTypeManager()->getStorage('secret_code');
  $secret_code_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $secret_codes = $storage->loadMultiple($secret_code_ids);
  $storage->delete($secret_codes);
}
